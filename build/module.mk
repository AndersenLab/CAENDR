# Required:
# MODULE_NAME, MODULE_DIR, PROJECT_DIR

include $(PROJECT_DIR)/build/help.mk

ENV_PATH = $(PROJECT_DIR)/env/$(ENV)
ENV_FILE = $(ENV_PATH)/global.env
TF_PATH = $(PROJECT_DIR)/tf/caendr

MODULE_ENV_FILE = $(MODULE_DIR)/module.env
MODULE_ENV_FILE_GENERATED = $(MODULE_DIR)/.env
SHARED_MODULE_DEST = $(MODULE_DIR)/caendr
SHARED_MODULE_SRC = $(PROJECT_DIR)/shared/caendr


-include $(ENV_FILE)
include $(MODULE_ENV_FILE)

LOAD_MODULE_ENV=export $$(cat $(MODULE_ENV_FILE_GENERATED) | sed $(WHITESPACE_REGEX) | sed $(COMMENT_REGEX) | xargs)

targets: clean pkg-dir env-file configure venv print-module-env print-ver
.PHONY: targets

#~
clean: #~
#~ Removes virtual environment, python cache, shared packages, and the 
#~ automatically generated .env file
	@echo -e "$(COLOR_B)Removing cached files...$(COLOR_N)"
	rm -rf $(MODULE_DIR)/venv
	rm -f $(MODULE_ENV_FILE_GENERATED)
	rm -rf $(MODULE_DIR)/caendr
	rm -rf $(MODULE_DIR)/.downloads
	find $(MODULE_DIR) -name *.pyc -exec rm -rv {} +
	find $(MODULE_DIR) -name __pycache__ -exec rm -rv {} +
	@echo -e "$(COLOR_G)DONE!$(COLOR_N)\n"

#~
pkg-dir:: #~
#~ copies the code for the shared/caendr package into the module directory
	@echo -e "\n$(COLOR_B)Copying shared package code...$(COLOR_N)"
	rm -rf $(SHARED_MODULE_DEST)
	cp -rf $(SHARED_MODULE_SRC) $(SHARED_MODULE_DEST)
	@echo ""
	@ls -R $(SHARED_MODULE_DEST)
	@echo -e "$(COLOR_G)DONE!$(COLOR_N)\n"


#~
env-file: #~
env-file: verify-env
#~ Merges the definitions from the environment global.env config and the 
#~ module.env to create the .env file to be deployed inside the container
	@echo -e "\n$(COLOR_B)Writing new .env file...$(COLOR_N)"
	rm -f $(MODULE_ENV_FILE_GENERATED) 
	@echo -e "# DO NOT EDIT THIS FILE! - IT IS AUTOMATICALLY GENERATED \n" >> $(MODULE_ENV_FILE_GENERATED) ;\
	(cat $(ENV_FILE) | sed $(WHITESPACE_REGEX) | sed $(COMMENT_REGEX)) >> $(MODULE_ENV_FILE_GENERATED) ;\
	(cat $(MODULE_ENV_FILE) | sed $(WHITESPACE_REGEX) | sed $(COMMENT_REGEX)) >> $(MODULE_ENV_FILE_GENERATED)
	@ls $(MODULE_ENV_FILE_GENERATED)
	@echo -e "$(COLOR_G)DONE!$(COLOR_N)\n"

#~
configure: #~
#~ Removes all cached files (including venv), generates the module's .env file,
#~ and copies the code for the shared/caendr package into the module directory
configure: print-module-env confirm clean env-file pkg-dir

configure-auto: print-module-env clean env-file pkg-dir

#~ 
venv: #~
#~ Creates a virtual python environment and installs packages from 'requirements.txt'
venv:
	@echo -e "\n$(COLOR_B)Installing python virtualenv and requirements.txt...$(COLOR_N)"
	virtualenv --python=python3 $(MODULE_DIR)/venv; \
	$(MODULE_DIR)/venv/bin/python -m pip install --upgrade pip; \
	$(MODULE_DIR)/venv/bin/pip install -r $(MODULE_DIR)/requirements.txt
	@echo -e "$(COLOR_G)DONE!$(COLOR_N)\n"

#~
build-container: #~
#~ Removes the virtual environment and python cache, regenerates the module .env file, 
#~ copies the code for the shared/caendr package into the module directory, and
#~ builds the container for the module and tags it with the name and version from module.env
build-container: verify-args print-module-env print-ver confirm clean env-file pkg-dir
	@echo -e "\n$(COLOR_B)Building container image...$(COLOR_N)"
	docker build $(MODULE_DIR) -t gcr.io/${GOOGLE_CLOUD_PROJECT_ID}/${MODULE_NAME}:${MODULE_VERSION}
	@echo -e "$(COLOR_G)DONE!$(COLOR_N)\n"

#~
publish-container: #~
#~ Configures and builds the container for the module and tags it with the 
#~ name and version from module.env before uploading it to the google container registry
publish-container: build-container
	@echo -e "\n$(COLOR_B)Publishing container image to gcr...$(COLOR_N)"
	docker push gcr.io/${GOOGLE_CLOUD_PROJECT_ID}/${MODULE_NAME}:${MODULE_VERSION}
	@echo -e "$(COLOR_G)DONE!$(COLOR_N)\n"

build-container-auto:configure-auto
	@echo -e "\n$(COLOR_B)Building container image...$(COLOR_N)"
	docker build $(MODULE_DIR) -t gcr.io/${GOOGLE_CLOUD_PROJECT_ID}/${MODULE_NAME}:${MODULE_VERSION}
	@echo -e "$(COLOR_G)DONE!$(COLOR_N)\n"

publish-container-auto: build-container-auto
	@echo -e "\n$(COLOR_B)Publishing container image to gcr...$(COLOR_N)"
	docker push gcr.io/${GOOGLE_CLOUD_PROJECT_ID}/${MODULE_NAME}:${MODULE_VERSION}
	@echo -e "$(COLOR_G)DONE!$(COLOR_N)\n"


verify-args:  verify-env

print-module-env: verify-env
	@echo -e "\n$(COLOR_P)****************************************************************************$(COLOR_N)"
	@echo -e "                    MODULE:       $(COLOR_C)$(MODULE_NAME)$(COLOR_N)"
	@echo -e "                    ENVIRONMENT:  $(COLOR_Y)$(ENV)$(COLOR_N)"
	@echo -e "$(COLOR_P)****************************************************************************$(COLOR_N)"

print-ver:
	@echo -e "$(COLOR_P)****************************************************************************$(COLOR_N)"
	@echo -e " CONTAINER: $(COLOR_W)gcr.io/${GOOGLE_CLOUD_PROJECT_ID}/${MODULE_NAME}:${MODULE_VERSION}$(COLOR_N)"
	@echo -e "$(COLOR_P)****************************************************************************$(COLOR_N)"
