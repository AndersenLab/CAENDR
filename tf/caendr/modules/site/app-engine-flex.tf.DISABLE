locals {
  cron_yaml_path = abspath("${path.module}/../../../../src/modules/site/cron.yaml")
}

resource "google_app_engine_application" "app" {
  project     = var.google_cloud_vars.project_id
  location_id = var.google_cloud_vars.app_location
  
  database_type = "CLOUD_DATASTORE_COMPATIBILITY"
  serving_status  = var.module_site_vars.serving_status ? "SERVING" : "USER_DISABLED"

  lifecycle {
    ignore_changes = all
  }
}


resource "google_app_engine_flexible_app_version" "site" {
  version_id      = replace("${var.module_site_vars.container_name}-${var.module_site_vars.container_version}",".","-")
  project         = "${var.google_cloud_vars.project_id}"
  service         = "default"
  runtime         = "custom"
  serving_status  = "SERVING"
  noop_on_destroy = true

  deployment {
    container {
      image = data.google_container_registry_image.module_site.image_url
    }
  }

  entrypoint {
    shell = "gunicorn -b :$PORT main:app --ssl-version TLSv1_2"
  }

  beta_settings = {
    cloud_sql_instances = "${var.cloud_sql_connection_uri}"
  }

  liveness_check {
    path = "/liveness_check"
    check_interval = "60s"
    timeout = "10s"
    failure_threshold = 2
    success_threshold = 2
    initial_delay = "300s"
  }

  readiness_check {
    path = "/readiness_check"
    check_interval = "120s"
    timeout = "10s"
    failure_threshold = 2
    success_threshold = 2
    app_start_timeout = "300s"
  }

  resources {
    cpu = 2
    memory_gb = 2
    disk_gb = 20
  }

  automatic_scaling {
    min_total_instances = 1
    max_total_instances = 5
    cool_down_period = "180s"
    cpu_utilization {
      target_utilization = 0.6
    }
  }

  lifecycle {
    create_before_destroy = true
  }

  depends_on = [
    time_sleep.wait_publish_container_module_site
  ]
}


resource "null_resource" "app_engine_cron_yaml" {
  triggers = {
    cron_yaml_sha1 = "${sha1(file(local.cron_yaml_path))}"
  }
  
  provisioner "local-exec" {
    command = format("gcloud app deploy %s", local.cron_yaml_path)
  }
}


resource "google_app_engine_service_split_traffic" "site_traffic" {
  service = google_app_engine_flexible_app_version.site.service

  migrate_traffic = false
  split {
    allocations = {
      (google_app_engine_flexible_app_version.site.version_id) = 1
    }
  }

  depends_on = [
    google_secret_manager_secret.app_engine_group,
    google_secret_manager_secret_version.app_engine_group,
    null_resource.app_engine_cron_yaml,
    time_sleep.wait_app_engine_start
  ]
}

resource "time_sleep" "wait_app_engine_start" {
  create_duration = "30s"

  depends_on = [
    google_app_engine_flexible_app_version.site
  ]
}
